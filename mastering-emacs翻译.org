* 第一章 引言
  "我正在使用linux,这是一个使emacs可以与硬件交流的库" ---Erwin, emacs,Freenode.
** 致谢
   感谢你购买<<mastering emacs>>.这本书经过了很长时间才出版.在2010我维护"Mastering emacs"博客的时候,Lee给我一个提议,他建议我把分享我在emacs上的想法还有在emacs上的工作流程.那时我已经有了一个很长但是很零散的一个org模式的文件--"blogideas.org",它记录了我在emacs上的一些想法和学到的东西以及别人教给我的.这个org文件最终成了我的博客,又成了现在这本书.
    特别致谢
    我要特别感谢下面这些人,他们给了我鼓励,建议,意见以及批评:
    Akira Kitada, Alvaro Ramirez, Arialdo Martini, Bob Koss, Catherine Mongrain, ChandanRajendra, Christopher Lee, Daniel Hannaske,Edwin Ong, Evan Misshula, Friedrich Paetzke,Gabriela Hajduk, Gabriele Lana, Greg Sieranski,Holger Pirk, John Mastro, John Kitchin, JonasEnlund, Konstantin Nazarenko, Lee Cullip,Luis Gerhorst, Lukas Pukenis, Manuel Uberti,Marcin Borkowski, Mark Kocera, Matt Wilbur,Matthew Daly, Michael Reid, Nanci Bonfim,Oliver Martell, Patrick Mosby, Patrick Martin,Sebastian Garcia Anderman, Stephen Nelson-Smith, Steve Mayer, Tariq Master, TravisJefferson, Travis Hartwell.

      像大多数人一样,我沉迷于emacs之前对她没有任何了解.我的情况是当时在大学一年级的时候在计算机科学课上,大多数人们都用的vim,这个事情仿佛告诉我"你用vim吧--就是这样".我不想被别人告诉怎么做,我走向了当时最流行的他的对立面,emacs.

      emacs在漫长的时间里被证明是一个稳定的并且可靠的编辑器,但是他是很难学习的.尽管有大量的用户文档,但是他们从没帮助我去学习,理解emacs.

      一直以来,emacs是个哲学甚至宗教.所以,"emacs教堂"是一个很恰当的描述emacs的俗语.你会在下一章发现这一点.
** 目标读者
   这是一个奇怪的主题在你已经买了这本书之后再讨论目标读者这个问题.但是这个一定要考虑一下,无论你的emacs在什么水平,你会在这本书里得到收获.
   第一,理所应当的,它的读者是刚解除emacs的新手们.如果你从未接触过emacs,你会认为真书有很大的价值.但是,如果你从没有接触过emacs并且没有技术基础,那么你在学习的时候将会遇到一些困难.尽管emacs最适合于编程,但是它也适合精通电脑的人群.尽管所有人都可以使用emacs,但是本书仍然假设你偏向于技术,但是不一定是程序员.
   如果你之前学习过emacs,但是最终放弃了,那么我希望这本书能说服你坚持下去.但是你不这样也是好的,一些语言或者环境(与很多emacs使用者说的相反)在emacs 上不能工作的很好.如果你主要在windows下工作并且使用Visual Studio 进行开发,使用emacs会使你前进两步,后退一步:你会得到一个增强版的编辑器工具集,但是你会失去IDE给你的所有好处.
   如果你是一个vim难民,欢迎你来到黑暗的一面!如果你在emacs下使用vim的仿真环境,那么这本书是多余的.
这本书关注emacs本身以及默认的快捷键并且教"emacs方式"做事情.但是也不要担心,大部分在这里的建议以及提示仍然是有效的,说不准你可能停止使用Evil mode呢.
最后,如果你现在已经是一个emacs用户并且努力上一个台阶,或者你可能只需要恢复使用emacs.那么这本书依然适用于你.
** 你能学到什么
   覆盖所有的emacs内容在一本书里是一个不可能完成的任务.我的目标是教你怎么样在emacs中进行生产工作.这只是emacs的一个小子集.我们希望的是,在阅读完这本书,并且做一些练习之后,你能知道足够多的知识去发现并且解决一些问题在编辑器方面.
更详细一点,我会交给你6个方面,写在下面的表格里:

*** emacs 是什么
    一个彻底的解释重要术语和惯例，Emacs使用在许多情况下有很大的不同其他编辑。您还将学习Emacs的哲学是什么，为什么一个文本编辑器，甚至有一个哲学。我也会简明的讨论Vim还有"编辑器大战"还有他们之间快捷键的区别.
*** 开始使用emacs
    怎样安装emacs,怎样运行它,怎样保证你合理的使用新版本的emacs.我将解释如何修改emacs并且让你的修改永久生效.我会介绍用户通用接口还有怎么加载颜色主题.最终,我会讨论用户接口还有一些方便的提示如果你习惯了.
*** 发掘emacs
    emacs是自我编辑的.但是这意味着什么,还有怎么使用这一点去发现更多的emacs并且解决跟特殊功能相关的问题.我会告诉你我做了什么在我学习使用一个新的mode或者emacs里的新功能.还有怎么使用自解释的天然特性去寻找需要找的东西.
*** DONE  移动.   [2015-07-06 Mon]
    在emacs中移动.首先关注一个简单的事情.在emacs中有很多种方法移动到你想移动到的地方,你要选择合适的快捷键.快速的移动与知道怎么样快速的移动是一个开发者进行战斗的一半,他们能大大的提高开发效率.你将学习到下面的东西:根据语法单元移动以及什么是真正的语法单元;使用窗口还有缓冲区.搜索,标记文本;选择文本,使用标记.
*** 编辑 
    正如上一章所讲的移动.我会给你展示emacs提供的多种多样的编辑文本的工具.他们包括使用平衡表达式,词,行,段落编辑文本;创建键盘宏自动完成重复的任务;搜索替换;寄存器;多文件编辑;省略;远程编辑文件,以及其他.
*** 生产力
emacs 可以做许多编辑器之外的事情.这一章只是对emacs吸引人的部分一个小的尝试.他们与成百上千的扩展有着密切的关系.我会激起你的兴趣,并且给你展示一些很有意思的东西在你编辑emacs环境以及在编辑的时候.


    
* 第二章 Emacs 的方式 [2015-07-06 Mon]
The purpose of a windowing system is to put some amusing fluff around your one almighty emacs window.  --Mark, gnu.emacs.help

  如果你能想象到自从1960年代之后的现代计算机跨度,emacs比所有的历史都长.emacs的作者是Richard Stallman收集了在一个叫TCEO编辑器(1976)上的一系列宏操作.TECO现在最多的是被看做是卡顿与比emacs更难理解的与DOS时代的结合.自那以来,有很多版本的emacs出现.但是今天你更多的遇到XEmacs还有GNU Emacs.
  这本书只会关注GNU Emacs.曾经XEmacs是最先进,功能最多的编辑器,但是并没有持续多久时间:自从GnuEmacs22版本之后.GNU Emacs是最好的emacs了.XEmacs 与 GNU Emacs 的历史是很有意思的.Gnu Emacs 是自由软件阵营的主力,Xemacs与 GNU Emacs现在同时被开发.
        注释:
        对于大多数人来说,单词Emacs特指GNUEmacs.我只会在区分不同版本的时候才会完整的拼写全名.当我说到Emacs的时候,我就是在说GNU Emacs.
    因为Emacs有悠久的历史,所以有大量的...怪事.emacs奇怪的术语是一个历史遗留问题,他们领先了现在的IDE很多年代.IDE需要发明自己的术语.也有人提议emacs更换更加简单的术语,但是这有很长的路要走.
    尽管缺少营销,核心开发团队人数少,不同于现代个人计算机的术语,可是仍然有很多人钟爱emacs.当Sublime Text展示他的小地图似得代码浏览(对源码的一个小的展示).一个人马上编写了一个一个"小地图"包在emacs做了相同的事情.实际上,正是这样的扩展性吸引了人或者说排斥了人们使用emacs.
    这一章会谈论emacs方式.emacs术语以及emacs对大多数人来说意味着什么.还有为什么说知道emacs来自哪里会让学习他更容易.
**  指导哲学 [2015-07-11 Sat]
    emacs是思想者的编辑器.朴实而简单.使用emacs的人群大部分都是因为他的各方面都是可定制的.他是原生的可扩展,用户可定制的,自我记录的编辑器.如果你来自其他的文本编辑器,这个可以改变任何事的主意看起来像一个与工作无关的娱乐.--的确,很多emacs的使用者牺牲工作时间开发emacs--但是一旦你成功的改变你的编辑器去做你想做的事情.就打开了一个无限可能的世界.
    这意味着你可以真正的以你的喜好重新绑定所有的Emacs快捷键;你也不再因为你的不能自编辑的,没道理api,以及给你的改动带来各种限制(比如你自定义的先行键,比如查找&替换窗口或者在原生的帮助文件里)的IDE而心力交瘁了.实际上,在emacs里你可以改变所有的事情-而且有人做到了.Vim用户迁移到emacs,因为emacs是一个比vim更好的vim.
    emacs促使你加入.一旦你开始使用emacs来编辑.你实现在emacs中使用IRC.电子邮件,数据库访问,命令行shell,编译代码甚至像编辑文本一样的浏览互联网,你开始保存你的按键绑定,配色方案已经所有的emacs功能,elisp写的配置文件等你改变的所有emacs行为.
    当所有的事情无缝的拼接在一起,你就避免了频繁的从一个应用切换到另一个应用:很多emacs用户比起使用编辑器来说更多的是一个浏览器或者是一个加强版的终端应用.
    *** emacs的历史
    emacs 的代码库可以追溯到30年以前.已经有130000次提交,大约有600个贡献者.
    如果你想更改emacs,有几近无数的包提供给你,Emacs lisp(也被简写为elisp)是你需要编写的.曾经有很多尝试,他们曾试图把其他语言的嫁接到elisp 上,但是这并没有持续很长时间.事实证明,Lisp确实是一个很好的抽象对于非常先进的工具,比如说emacs.同时,大部分现代语言都不基于时间测试:TCL(工具命令语言)在90年代被考虑并且在当时很流行--他跟lisp有区别,但是更多的是相似.
    唯一的变化就是摆弄你的emacs配置,有时你需要学习与他相处(少不了与lisp交流,但是我再下一节解释这为什么是一个好事情.).这就是我为什么强调这个点说这是一个思想者的编辑器.如果你讨厌调整所有的事情,并且想从一个地方得到所有的东西,你有两个选项可以选择:
    *** 使用一个集成包 
    有很多集成好的包,他们包括了很多扩展包还有很多作者认为很好的默认设置.他们是一个好的开端但是需要注意的是这样你不知道这个包从哪里开始,从哪里结束.
我推荐你选择下面列出的集成包之一:
Steve Purcell’s .emacs.d
https://github.com/purcell/emacs.d
• Bozhidar Batzov’s Prelude
https://github.com/bbatsov/prelude

   *** 使用默认配置
   这当然也是一个emacs的选项.我会说,它缺乏很多集成的功能.我希望你能按照自己的喜好配置或者使用现成的配置包.作为一个编辑器,emacs从根本上跟主流的编辑器不同.维护着在更改默认配置上出奇的保守.(所有人都影歌知道怎么样配置emacs).

** LISP ?
   Emacs被自己的lisp方言驱动,叫做Emacs lisp 或者简单的说elisp.许多人被这个深奥的语言拒之门外或者吓住了.这是个耻辱,因为这是一个实用并且有趣的在一个用lisp构建的编辑器里学习LISP的方式.编辑器的每一个部分都可以被检查,求值或者被修改,因为这个编辑器的百分之95是elisp,百分之五的c代码.这也是一个实用的方式去学习一个激进的范式:代码跟数据可以互换并且扩展;这个语言由于有简单的语法,可以使用宏简单的扩展.
   不幸的是,没有学习elisp的点.在这本书里,我会讨论通用接口:一个动态生成的可以配置的接口.然而,一个像绑定快捷键这样简单的操作,你就需要与emacs交互.但是这也不全是坏事.大部分你想解决的问题都已经在很早以前被人解决了;在网上搜索解决方案是一个很简单的事情.
   尽管elisp现在与现代语言比如说'python''Ruby''JavaScript'比起来很不流行.但是我怀疑emacs是否可以获得同样的力量如果使用一个传统的面相过程/面相对象的语言.代码与数据可以互相转换,使elisp充满魅力.你阅读的代码同时也是被lisp操作的数据."什么是数据"与"什么是代码"的问题是不存在的.
   数据就是代码.宏系统或者随意的一段代码就可以改变函数.这意味着你可以改变现有代码的运行方式而不改变原来的代码.这给了你史无前例的能力去改变emacs来符合你的需要.这在软件工程中被看做较差的一点在emacs中被看做是一个好处.你可以引用,替换或者修改现有的路径在emacs里面来满足你的需求通过重写大片的别人的源码
   这本书不会大量的说明elisp,emacs有一个内置的elisp的文档,我高度建议你去看一下这个文档如果你好奇的话--你会老老实实的这么做的.Lisp是有趣的,这是一个伟大的方式去学习,使用一个强大的语言在一个实用的环境里.不要被括号吓到,其实他们是最大的优势.
** emacs是一个操作系统 [2015-07-12 Sun]
   当你开始运行Emacs的时候,你实际上加载了一个新的小型的基于操作系统二进制接口的C内核.他包含了基本的东西比如文件系统与网络访问系统,在屏幕上绘制东西或者把控制字符输出到控制台.
Emacs的基石是elisp的解释器,没有它,就没有Emacs.这个解释器是老旧的,他在挣扎.现在的Emacs用户对这个简单的解释器有了新的要求:速度跟异步执行是两个主要的要求.这个解释器在一个主线程里运行,一个大的任务会锁住UI线程.但是这又解决办法.尽管有多种多样的需求,但是这并不能阻止人们写更加精妙的程序扩展包.
你写elisp的程序的时候,不仅仅是在沙箱里堆砌代码,与所有的事情都没关系,你是在改变一个存在的操作系统.一个运行在操作系统上的操作系统.每一个你改变的变量,每一个你调用的函数都使用与你编辑文本时相同的解释器.
Emacs是黑客们的梦想,因为他是一个巨大的,可变的地方.他既是祝福又是诅咒.你可以重定义既有的函数,左右更改变量;你也可以在任何时候查询他的状态--状态会在你按下任何一个键的时候改变也包括emacs做出响应的时候不管是由于按键还是有由于网络栈的改变.Emacs是可编辑的,因为它本身就是文本.没有其他任何一个编辑器可以做到这点,也没有编辑器与之相近.
Emacs从不崩溃--也不是绝对.Emacs有一个启动时间的计时器(M+x emacs-uptime) , 几个月的启动时间并不罕见.
所以,每当你问emacs问题的时候,我会告诉你怎么样晚一点问,你要问的是你的Emacs现在是什么状态.正是如此,Emacs有一个及其优秀的elisp调试器并且可以无限制访问访问解释器每一方面与当前状态.,当然,他也有很好的代码补全.每当你写下一行elisp代码.你都可以要求解释器对他求值,并且它也会这样做.无论是给参数变量赋值还是下载包.
** 扩展能力  [2015-07-13 Mon]
扩展性是重要的,但是强调他的困难性在你不知道他的范围的情况下是困难的.我将举一些例子来说明emacs可以做什么,或者说说他的技能,他可以让人们做什么.
[2015-07-14 Tue]
